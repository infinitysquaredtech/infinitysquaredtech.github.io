function PortfolioScroller({ projects, title }) {
    try {
        const [currentIndex, setCurrentIndex] = React.useState(0);
        const [showModal, setShowModal] = React.useState(false);
        const [selectedProject, setSelectedProject] = React.useState(null);
        const [itemsPerView, setItemsPerView] = React.useState(3);
        const scrollContainerRef = React.useRef(null);
        const startX = React.useRef(0);
        const isDragging = React.useRef(false);

        React.useEffect(() => {
            const updateItemsPerView = () => {
                if (window.innerWidth < 768) {
                    setItemsPerView(1);
                } else if (window.innerWidth < 1024) {
                    setItemsPerView(2);
                } else {
                    setItemsPerView(3);
                }
            };

            updateItemsPerView();
            window.addEventListener('resize', updateItemsPerView);
            return () => window.removeEventListener('resize', updateItemsPerView);
        }, []);

        const maxIndex = Math.max(0, projects.length - itemsPerView);

        const nextSlide = () => {
            setCurrentIndex(prev => Math.min(prev + 1, maxIndex));
        };

        const prevSlide = () => {
            setCurrentIndex(prev => Math.max(prev - 1, 0));
        };

        const handleProjectClick = (project) => {
            setSelectedProject(project);
            setShowModal(true);
        };

        const handleTouchStart = (e) => {
            startX.current = e.touches[0].clientX;
            isDragging.current = true;
        };

        const handleTouchMove = (e) => {
            if (!isDragging.current) return;
        };

        const handleTouchEnd = (e) => {
            if (!isDragging.current) return;
            isDragging.current = false;
            
            const endX = e.changedTouches[0].clientX;
            const diffX = startX.current - endX;
            
            if (Math.abs(diffX) > 50) {
                if (diffX > 0) {
                    nextSlide();
                } else {
                    prevSlide();
                }
            }
        };

        return (
            <div id='projects' data-name="portfolio-scroller" data-file="components/PortfolioScroller.js" className="mb-12 md:mb-16 py-20">
                <h2 className="text-2xl md:text-4xl font-bold mb-6 md:mb-8 text-center px-4">{title}</h2>
                
                <div className="relative">
                    <div 
                        ref={scrollContainerRef}
                        className="overflow-hidden"
                        onTouchStart={handleTouchStart}
                        onTouchMove={handleTouchMove}
                        onTouchEnd={handleTouchEnd}
                    >
                        <div 
                            className="flex transition-transform duration-300 ease-in-out"
                            style={{ transform: `translateX(-${currentIndex * (100 / itemsPerView)}%)` }}
                        >
                            {projects.map((project, index) => (
                                <div 
                                    key={index} 
                                    className={`flex-shrink-0 px-2 md:px-4 ${
                                        itemsPerView === 1 ? 'w-full' : 
                                        itemsPerView === 2 ? 'w-1/2' : 'w-1/3'
                                    }`}
                                >
                                    <div 
                                        className="bg-gray-900 rounded-xl overflow-hidden hover:transform hover:scale-105 transition-all duration-300 cursor-pointer"
                                        onClick={() => handleProjectClick(project)}
                                    >
                                        <img src={project.image} alt={project.title} className="w-full h-40 md:h-48 object-cover" />
                                        <div className="p-4 md:p-6">
                                            <div className="text-xs md:text-sm text-gray-400 mb-2">{project.category}</div>
                                            <h3 className="text-lg md:text-xl font-bold mb-2 md:mb-3">{project.title}</h3>
                                            <p className="text-gray-300 text-xs md:text-sm leading-relaxed">{project.description}</p>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    <button 
                        onClick={prevSlide}
                        disabled={currentIndex === 0}
                        className="absolute left-0 md:-left-4 top-1/2 transform -translate-y-1/2 bg-white text-black w-8 h-8 md:w-12 md:h-12 rounded-full flex items-center justify-center shadow-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 transition-colors z-10"
                    >
                        <i className="fas fa-chevron-left text-sm md:text-base"></i>
                    </button>

                    <button 
                        onClick={nextSlide}
                        disabled={currentIndex === maxIndex}
                        className="absolute right-0 md:-right-4 top-1/2 transform -translate-y-1/2 bg-white text-black w-8 h-8 md:w-12 md:h-12 rounded-full flex items-center justify-center shadow-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 transition-colors z-10"
                    >
                        <i className="fas fa-chevron-right text-sm md:text-base"></i>
                    </button>
                </div>

                <div className="flex justify-center mt-4 md:mt-6 space-x-2">
                    {Array.from({ length: maxIndex + 1 }).map((_, index) => (
                        <button
                            key={index}
                            onClick={() => setCurrentIndex(index)}
                            className={`w-2 h-2 md:w-3 md:h-3 rounded-full transition-colors ${
                                index === currentIndex ? 'bg-white' : 'bg-gray-600'
                            }`}
                        />
                    ))}
                </div>

                {showModal && selectedProject && (
                    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-2 md:p-4">
                        <div className="bg-gray-900 rounded-xl md:rounded-2xl max-w-4xl w-full max-h-[95vh] md:max-h-[90vh] overflow-hidden">
                            <div className="flex justify-between items-center p-4 md:p-6 border-b border-gray-700">
                                <h3 className="text-lg md:text-2xl font-bold text-white pr-4">{selectedProject.title}</h3>
                                <button 
                                    onClick={() => setShowModal(false)}
                                    className="text-gray-400 hover:text-white text-xl md:text-2xl flex-shrink-0"
                                >
                                    <i className="fas fa-times"></i>
                                </button>
                            </div>
                            <div className="p-4 md:p-6">
                                <iframe
                                    src={selectedProject.demoUrl}
                                    className="w-full h-48 md:h-96 rounded-lg"
                                    allowFullScreen
                                    title={`${selectedProject.title} Demo`}
                                />
                                <div className="mt-3 md:mt-4">
                                    <p className="text-gray-300 text-sm md:text-base">{selectedProject.description}</p>
                                    <div className="mt-2 text-xs md:text-sm text-gray-400">Category: {selectedProject.category}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        );
    } catch (error) {
        console.error('PortfolioScroller component error:', error);
        reportError(error);
    }
}