function Header() {
    try {
        const [isMenuOpen, setIsMenuOpen] = React.useState(false);
        const [currentRoute, setCurrentRoute] = React.useState(Router.currentRoute);

        React.useEffect(() => {
            const handleRouteChange = () => {
                setCurrentRoute(Router.currentRoute);
            };
            
            window.addEventListener('routechange', handleRouteChange);
            return () => window.removeEventListener('routechange', handleRouteChange);
        }, []);

        const scrollToSection = (sectionId) => {
            const element = document.getElementById(sectionId);
            if (element) {
                element.scrollIntoView({ behavior: 'smooth' });
                setIsMenuOpen(false);
            }
        };

        const navigateToHome = () => {
            scrollToSection('home');
            Router.navigate('/');
            setIsMenuOpen(false);
        };

        const getNavigationItems = () => {
            if (currentRoute === '/') {
                return [
                    { label: 'Home', action: () => scrollToSection('home') },
                    { label: 'Clients', action: () => scrollToSection('clients') },
                    { label: 'Services', action: () => scrollToSection('services') },
                    { label: 'About', action: () => scrollToSection('about') },
                    { label: 'Contact', action: () => scrollToSection('contact') }
                ];
            } else if (currentRoute === '/services/web-dev') {
                return [
                    { label: 'Home', action: () => scrollToSection('home') },
                    { label: 'Features', action: () => scrollToSection('features') },
                    { label: 'Contact', action: () => scrollToSection('contact') }
                ];
            } else {
                return [
                    { label: 'Home', action: () => scrollToSection('home') },
                    { label: 'Projects', action: () => scrollToSection('projects') },
                    { label: 'Features', action: () => scrollToSection('features') },
                    { label: 'Contact', action: () => scrollToSection('contact') }
                ];
            }
        };

        const navItems = getNavigationItems();

        return (
            <header data-name="header" data-file="components/Header.min.js" className="fixed top-0 w-full bg-white/95 backdrop-blur-md shadow-lg z-50 border-b border-gray-200">
                <nav className="container mx-auto px-4 py-4">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center logo-container">
                            <img 
                                src="asset/logos/infinity_logo.webp" 
                                alt="Infinity Squared Technologies Logo" 
                                className="w-20"
                                onClick={() => navigateToHome()}
                            />
                        </div>

                        <div className="hidden md:flex space-x-8">
                            {navItems.map((item, index) => (
                                <button 
                                    key={index}
                                    onClick={item.action} 
                                    className="text-gray-700 hover:text-black transition-colors font-medium"
                                >
                                    {item.label}
                                </button>
                            ))}
                        </div>

                        <button 
                            className="md:hidden text-black"
                            onClick={() => setIsMenuOpen(!isMenuOpen)}
                        >
                            <i className={`fas ${isMenuOpen ? 'fa-times' : 'fa-bars'} text-xl`}></i>
                        </button>
                    </div>

                    {isMenuOpen && (
                        <div className="md:hidden mt-4 pb-4 border-t border-gray-200 pt-4">
                            <div className="flex flex-col space-y-3">
                                {navItems.map((item, index) => (
                                    <button 
                                        key={index}
                                        onClick={item.action} 
                                        className="text-gray-700 hover:text-black py-2 text-left"
                                    >
                                        {item.label}
                                    </button>
                                ))}
                            </div>
                        </div>
                    )}
                </nav>
            </header>
        );
    } catch (error) {
        console.error('Header component error:', error);
        reportError(error);
        return (
            <header className="fixed top-0 w-full bg-white/95 backdrop-blur-md shadow-lg z-50 border-b border-gray-200">
                <nav className="container mx-auto px-4 py-4">
                    <div className="flex items-center justify-between">
                        <div className="flex items-center logo-container">
                            <img 
                                src="asset/logos/infinity_logo.webp" 
                                alt="Infinity Squared Technologies Logo" 
                                className="w-20"
                            />
                        </div>
                        <p className="text-gray-500">Unable to load header section</p>
                    </div>
                </nav>
            </header>
        );
    }
}
